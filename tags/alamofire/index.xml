<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alamofire on Swift Injection</title>
    <link>https://yoichitgy.github.io/tags/alamofire/</link>
    <description>Recent content in Alamofire on Swift Injection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Sep 2015 11:02:53 +0900</lastBuildDate>
    <atom:link href="https://yoichitgy.github.io/tags/alamofire/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dependency Injection in MVVM Architecture with ReactiveCocoa Part 5: Asynchronous Image Load</title>
      <link>https://yoichitgy.github.io/post/dependency-injection-in-mvvm-architecture-with-reactivecocoa-part-5-asynchronous-image-load/</link>
      <pubDate>Thu, 10 Sep 2015 11:02:53 +0900</pubDate>
      
      <guid>https://yoichitgy.github.io/post/dependency-injection-in-mvvm-architecture-with-reactivecocoa-part-5-asynchronous-image-load/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Updated on Nov 20, 2015&lt;/strong&gt; to migrate to ReactiveCocoa v4.0.0 alpha 3 and Alamofire v3.x.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated on Oct 1, 2015&lt;/strong&gt; for the release versions of Swift 2 and Xcode 7.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By &lt;a href=&#34;https://yoichitgy.github.io/post/dependency-injection-in-mvvm-architecture-with-reactivecocoa-part-4-implementing-the-view-and-viewmodel/&#34;&gt;the previous blog post&lt;/a&gt;, we developed an example app, in MVVM architecture, displaying meta data of images received from &lt;a href=&#34;https://pixabay.com/&#34;&gt;Pixabay&lt;/a&gt; server. In this blog post, we are going add a feature to asynchronously load the images. To handle the asynchronous events, &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa&#34;&gt;ReactiveCocoa&lt;/a&gt; will be used as we did in the previous posts. Through the development, we will learn how to add a feature in MVVM architecture with unit tests and dependency injection are updated.&lt;/p&gt;

&lt;p&gt;The source code used in the blog posts is available at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectMVVMExample&#34;&gt;SwinjectMVVMExample&lt;/a&gt;: Complete version of the project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoichitgy/SwinjectMVVMExample_ForBlog&#34;&gt;SwinjectMVVMExample_ForBlog&lt;/a&gt;: Simplified version of the project to follow the blog posts (except updates of Xcode and frameworks).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notice:e195b0dcdb12716d5c3e3911b931c7d6&#34;&gt;Notice&lt;/h2&gt;

&lt;p&gt;To use with Swift 2 and Xcode 7, ReactiveCocoa &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/releases&#34;&gt;version 4.0&lt;/a&gt; is used though it is still in an alpha version at the moment. Notice that ReactiveCocoa 3.0 has functional style APIs like &lt;code&gt;|&amp;gt; map&lt;/code&gt; or &lt;code&gt;|&amp;gt; flatMap&lt;/code&gt;, but version 4 APIs are in protocol oriented and fluent style like &lt;code&gt;.map()&lt;/code&gt; or &lt;code&gt;.flatMap()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;model:e195b0dcdb12716d5c3e3911b931c7d6&#34;&gt;Model&lt;/h2&gt;

&lt;p&gt;First, we are going to add the feature to request an image to our Model. Add &lt;code&gt;requestImage&lt;/code&gt; method to &lt;code&gt;Networking&lt;/code&gt; protocol. The method takes an image URL and returns a SignalProducer instance to send the image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Networking.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa

public protocol Networking {
    // Omitted

    func requestImage(url: String) -&amp;gt; SignalProducer&amp;lt;UIImage, NetworkError&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify &lt;code&gt;Network&lt;/code&gt; class to implement &lt;code&gt;requestImage&lt;/code&gt; method. In the method, the initializer of &lt;code&gt;SignalProducer&lt;/code&gt; with a trailing closure is used to convert an asynchronous response of Alamofire to a &lt;code&gt;Signal&lt;/code&gt; of ReactiveCocoa. If the response is successful and its data are valid, &lt;code&gt;.Next&lt;/code&gt; and &lt;code&gt;.Completed&lt;/code&gt; events are sent to &lt;code&gt;observer&lt;/code&gt;. Otherwise an &lt;code&gt;.Failed&lt;/code&gt; event is sent. Because the response of Alamofire runs in the main thread by default, a serial queue is passed to Alamofire.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa
import Alamofire

public final class Network: Networking {
    private let queue = dispatch_queue_create(
        &amp;quot;SwinjectMMVMExample.ExampleModel.Network.Queue&amp;quot;,
        DISPATCH_QUEUE_SERIAL)

    // Omitted

    public func requestImage(url: String) -&amp;gt; SignalProducer&amp;lt;UIImage, NetworkError&amp;gt; {
        return SignalProducer { observer, disposable in
            let serializer = Alamofire.Request.dataResponseSerializer()
            Alamofire.request(.GET, url)
                .response(queue: self.queue, responseSerializer: serializer) {
                    response in
                    switch response.result {
                    case .Success(let data):
                        guard let image = UIImage(data: data) else {
                            observer.sendFailed(.IncorrectDataReturned)
                            return
                        }
                        observer.sendNext(image)
                        observer.sendCompleted()
                    case .Failure(let error):
                        observer.sendFailed(NetworkError(error: error))
                    }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update stubs used in &lt;code&gt;ImageSearchSpec&lt;/code&gt; since &lt;code&gt;requestImage&lt;/code&gt; method was added to &lt;code&gt;Networking&lt;/code&gt; protocol. Because &lt;code&gt;requestImage&lt;/code&gt; method is not used in the unit tests, each stub method just returns an empty &lt;code&gt;SignalProducer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
import ReactiveCocoa
@testable import ExampleModel

class ImageSearchSpec: QuickSpec {
    // MARK: Stub
    class GoodStubNetwork: Networking {
        // Omitted

        func requestImage(url: String) -&amp;gt; SignalProducer&amp;lt;UIImage, NetworkError&amp;gt; {
            return SignalProducer.empty
        }
    }

    class BadStubNetwork: Networking {
        // Omitted

        func requestImage(url: String) -&amp;gt; SignalProducer&amp;lt;UIImage, NetworkError&amp;gt; {
            return SignalProducer.empty
        }
    }

    class ErrorStubNetwork: Networking {
        // Omitted

        func requestImage(url: String) -&amp;gt; SignalProducer&amp;lt;UIImage, NetworkError&amp;gt; {
            return SignalProducer.empty
        }
    }

    // Omitted
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add unit tests to &lt;code&gt;NetworkSpec&lt;/code&gt; to check the new &lt;code&gt;requestImage&lt;/code&gt; method. As a stable server for the tests, &lt;a href=&#34;http://httpbin.org&#34;&gt;httpbin.org&lt;/a&gt; is used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NetworkSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
@testable import ExampleModel

class NetworkSpec: QuickSpec {
    override func spec() {
        var network: Network!
        beforeEach {
            network = Network()
        }

        // Omitted

        describe(&amp;quot;Image&amp;quot;) {
            it(&amp;quot;eventually gets an image.&amp;quot;) {
                var image: UIImage?
                network.requestImage(&amp;quot;https://httpbin.org/image/jpeg&amp;quot;)
                    .on(next: { image = $0 })
                    .start()

                expect(image).toEventuallyNot(beNil(), timeout: 5)
            }
            it(&amp;quot;eventually gets an error if incorrect data for an image is returned.&amp;quot;) {
                var error: NetworkError?
                network.requestImage(&amp;quot;https://httpbin.org/get&amp;quot;)
                    .on(failed: { error = $0 })
                    .start()

                expect(error).toEventually(
                    equal(NetworkError.IncorrectDataReturned), timeout: 5)
            }
            it(&amp;quot;eventually gets an error if the network has a problem.&amp;quot;) {
                var error: NetworkError? = nil
                network.requestImage(&amp;quot;https://not.existing.server.comm/image/jpeg&amp;quot;)
                    .on(failed: { error = $0 })
                    .start()

                expect(error).toEventually(
                    equal(NetworkError.NotReachedServer), timeout: 5)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first test checks that &lt;code&gt;Network&lt;/code&gt; returns an image asynchronously as a successful case. The second test checks that &lt;code&gt;Network&lt;/code&gt; sends &lt;code&gt;NetworkError.IncorrectDataReturned&lt;/code&gt; error if non-image data are returned from the server. The third test checks that an error from Alamofire is converted to its corresponding &lt;code&gt;NetworkError&lt;/code&gt; and passed through the &lt;code&gt;Network&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;Command-U&lt;/code&gt; to run the unit tests.&lt;/p&gt;

&lt;h2 id=&#34;viewmodel:e195b0dcdb12716d5c3e3911b931c7d6&#34;&gt;ViewModel&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s move on to our ViewModel to receive the image from Model and to handle it for View. At the beginning, add &lt;code&gt;RACUtil.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleViewModel&lt;/code&gt; group. Make sure that it is added to &lt;code&gt;ExampleViewModel&lt;/code&gt; target when you save them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RACUtil.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
import ReactiveCocoa

internal extension NSObject {
    internal var racutil_willDeallocProducer: SignalProducer&amp;lt;(), NoError&amp;gt;  {
        return self.rac_willDeallocSignal()
            .toSignalProducer()
            .map { _ in }
            .flatMapError { _ in SignalProducer(value: ()) }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the extension to &lt;code&gt;NSObject&lt;/code&gt;, &lt;code&gt;rac_willDeallocSignal&lt;/code&gt; is mapped to a &lt;code&gt;SignalProducer&lt;/code&gt; that sends an event with an empty tuple when an object is being deallocated. We add the extension here because ReactiveCocoa Swift APIs still do not have an extension equivalent to &lt;code&gt;rac_willDeallocSignal&lt;/code&gt; supported by Objective-C APIs. &lt;code&gt;toSignalProducer&lt;/code&gt; is used to convert the Objective-C &lt;code&gt;Signal&lt;/code&gt; to Swift &lt;code&gt;SignalProducer&lt;/code&gt;, and &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMapError&lt;/code&gt; are used to transform the event and error types.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;getPreviewImage&lt;/code&gt; method to &lt;code&gt;ImageSearchTableViewCellModeling&lt;/code&gt; protocol and &lt;code&gt;ImageSearchTableViewCellModel&lt;/code&gt; class as followings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchTableViewCellModeling.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa

public protocol ImageSearchTableViewCellModeling {
    var id: UInt64 { get }
    var pageImageSizeText: String { get }
    var tagText: String { get }

    func getPreviewImage() -&amp;gt; SignalProducer&amp;lt;UIImage?, NoError&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchTableViewCellModel.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa
import ExampleModel

public final class ImageSearchTableViewCellModel
    : NSObject, ImageSearchTableViewCellModeling
{
    public let id: UInt64
    public let pageImageSizeText: String
    public let tagText: String

    private let network: Networking
    private let previewURL: String
    private var previewImage: UIImage?

    internal init(image: ImageEntity, network: Networking) {
        id = image.id
        pageImageSizeText = &amp;quot;\(image.pageImageWidth) x \(image.pageImageHeight)&amp;quot;
        tagText = image.tags.joinWithSeparator(&amp;quot;, &amp;quot;)

        self.network = network
        previewURL = image.previewURL

        super.init()
    }

    public func getPreviewImage() -&amp;gt; SignalProducer&amp;lt;UIImage?, NoError&amp;gt; {
        if let previewImage = self.previewImage {
            return SignalProducer(value: previewImage).observeOn(UIScheduler())
        }
        else {
            let imageProducer = network.requestImage(previewURL)
                .takeUntil(self.racutil_willDeallocProducer)
                .on(next: { self.previewImage = $0 })
                .map { $0 as UIImage? }
                .flatMapError { _ in SignalProducer&amp;lt;UIImage?, NoError&amp;gt;(value: nil) }

            return SignalProducer(value: nil)
                .concat(imageProducer)
                .observeOn(UIScheduler())
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;getPreviewImage&lt;/code&gt; method returns a &lt;code&gt;SignalProducer&lt;/code&gt; instance sending &lt;code&gt;UIImage&lt;/code&gt;. A cached image, as &lt;code&gt;previewImage&lt;/code&gt; property, is wrapped in an &lt;code&gt;SignalProducer&lt;/code&gt; instance if the cache exists. Otherwise, another &lt;code&gt;SignalProducer&lt;/code&gt; that requests an image to &lt;code&gt;Networking&lt;/code&gt; is returned.&lt;/p&gt;

&lt;p&gt;The latter &lt;code&gt;SignalProducer&lt;/code&gt; consists of two parts concatenated by &lt;code&gt;concat&lt;/code&gt; method. The first part is &lt;code&gt;SignalProducer(value: nil)&lt;/code&gt;, which sends &lt;code&gt;nil&lt;/code&gt; then completes immediately. The &lt;code&gt;nil&lt;/code&gt; is sent at the beginning to clear an old image displayed in the &lt;code&gt;UIImageView&lt;/code&gt; on a reused cell. The second part is &lt;code&gt;imageProducer&lt;/code&gt;, which requests the image to &lt;code&gt;Networking&lt;/code&gt;. In the second part, an error is mapped to &lt;code&gt;nil&lt;/code&gt; by &lt;code&gt;flatMapError&lt;/code&gt; to ignore the error because no error message should be displayed for each cell. To terminate the signal producer when the &lt;code&gt;ImageSearchTableViewCellModel&lt;/code&gt; instance is deallocated, &lt;code&gt;takeUntil&lt;/code&gt; method is called with &lt;code&gt;racutil_willDeallocProducer&lt;/code&gt;. To use the &lt;code&gt;NSObject&lt;/code&gt; extension, &lt;code&gt;ImageSearchTableViewCellModel&lt;/code&gt; inherits &lt;code&gt;NSObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Modify &lt;code&gt;ImageSearchTableViewModel&lt;/code&gt; to pass a &lt;code&gt;Networking&lt;/code&gt; instance as below. A parameter is added to its initializer to get &lt;code&gt;Networking&lt;/code&gt; instance injected. The instance is passed to the initializer of &lt;code&gt;ImageSearchTableViewCellModel&lt;/code&gt; in &lt;code&gt;startSearch&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchTableViewModel.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa
import ExampleModel

public final class ImageSearchTableViewModel: ImageSearchTableViewModeling {
    public var cellModels: AnyProperty&amp;lt;[ImageSearchTableViewCellModeling]&amp;gt; {
        return AnyProperty(_cellModels)
    }
    private let _cellModels = MutableProperty&amp;lt;[ImageSearchTableViewCellModeling]&amp;gt;([])
    private let imageSearch: ImageSearching
    private let network: Networking

    public init(imageSearch: ImageSearching, network: Networking) {
        self.imageSearch = imageSearch
        self.network = network
    }

    public func startSearch() {
        imageSearch.searchImages()
            .map { response in
                response.images.map {
                    ImageSearchTableViewCellModel(image: $0, network: self.network)
                        as ImageSearchTableViewCellModeling
                }
            }
            .observeOn(UIScheduler())
            .on(next: { cellModels in
                self._cellModels.value = cellModels
            })
            .start()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At last, modify &lt;code&gt;AppDelegate&lt;/code&gt; to add dependency injection of &lt;code&gt;Networking&lt;/code&gt; to &lt;code&gt;ImageSearchTableViewModel&lt;/code&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AppDelegate.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    let container = Container() { container in
        // Models
        container.register(Networking.self) { _ in Network() }
        container.register(ImageSearching.self) { r in
            ImageSearch(network: r.resolve(Networking.self)!)
        }

        // View models
        container.register(ImageSearchTableViewModeling.self) { r in
            ImageSearchTableViewModel(
                imageSearch: r.resolve(ImageSearching.self)!,
                network: r.resolve(Networking.self)!)
        }

        // Views
        container.registerForStoryboard(ImageSearchTableViewController.self) { r, c in
            c.viewModel = r.resolve(ImageSearchTableViewModeling.self)!
        }
    }

    // Omitted
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s modify and add unit tests for the updated ViewModel. First, modify &lt;code&gt;ImageSearchTableViewModelSpec&lt;/code&gt; to add &lt;code&gt;StubNetwork&lt;/code&gt; and pass its instance to the modified initializer of &lt;code&gt;ImageSearchTableViewModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchTableViewModelSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ImageSearchTableViewModelSpec: QuickSpec {
    // MARK: Stub
    class StubImageSearch: ImageSearching {
        func searchImages() -&amp;gt; SignalProducer&amp;lt;ResponseEntity, NetworkError&amp;gt; {
            return SignalProducer { observer, disposable in
                observer.sendNext(dummyResponse)
                observer.sendCompleted()
            }
            .observeOn(QueueScheduler())
        }
    }

    class StubNetwork: Networking {
        func requestJSON(url: String, parameters: [String : AnyObject]?)
            -&amp;gt; SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;
        {
            return SignalProducer.empty
        }

        func requestImage(url: String) -&amp;gt; SignalProducer&amp;lt;UIImage, NetworkError&amp;gt; {
            return SignalProducer.empty
        }
    }

    // MARK: Spec
    override func spec() {
        var viewModel: ImageSearchTableViewModel!
        beforeEach {
            viewModel = ImageSearchTableViewModel(
                imageSearch: StubImageSearch(),
                network: StubNetwork())
        }

        // Omitted
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a dummy image instance to &lt;code&gt;DummyResponse.swift&lt;/code&gt;. The instance will be used later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DummyResponse.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let image1x1: UIImage = {
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1, 1), true, 0)
    let image = UIGraphicsGetImageFromCurrentImageContext()
    UIGraphicsEndImageContext()
    return image
}()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add stubs and unit tests to &lt;code&gt;ImageSearchTableViewCellModelSpec&lt;/code&gt; as below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchTableViewCellModelSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
import Quick
import Nimble
import ReactiveCocoa
@testable import ExampleModel
@testable import ExampleViewModel

class ImageSearchTableViewCellModelSpec: QuickSpec {
    // MARK: Stubs
    class StubNetwork: Networking {
        func requestJSON(url: String, parameters: [String : AnyObject]?)
            -&amp;gt; SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;
        {
            return SignalProducer.empty
        }

        func requestImage(url: String) -&amp;gt; SignalProducer&amp;lt;UIImage, NetworkError&amp;gt; {
            return SignalProducer(value: image1x1).observeOn(QueueScheduler())
        }
    }

    class ErrorStubNetwork: Networking {
        func requestJSON(url: String, parameters: [String : AnyObject]?)
            -&amp;gt; SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;
        {
            return SignalProducer.empty
        }

        func requestImage(url: String) -&amp;gt; SignalProducer&amp;lt;UIImage, NetworkError&amp;gt; {
            return SignalProducer(error: .NotConnectedToInternet)
        }
    }

    // MARK: Spec
    override func spec() {
        var viewModel: ImageSearchTableViewCellModel!
        beforeEach {
            viewModel = ImageSearchTableViewCellModel(
                image: dummyResponse.images[0],
                network: StubNetwork())
        }

        describe(&amp;quot;Constant values&amp;quot;) {
            it(&amp;quot;sets id.&amp;quot;) {
                expect(viewModel.id).toEventually(equal(10000))
            }
            it(&amp;quot;formats tag and page image size texts.&amp;quot;) {
                expect(viewModel.pageImageSizeText)
                    .toEventually(equal(&amp;quot;1000 x 2000&amp;quot;))
                expect(viewModel.tagText).toEventually(equal(&amp;quot;a, b&amp;quot;))
            }
        }
        describe(&amp;quot;Preview image&amp;quot;) {
            it(&amp;quot;returns nil at the first time.&amp;quot;) {
                var image: UIImage? = image1x1
                viewModel.getPreviewImage()
                    .take(1)
                    .on(next: { image = $0 })
                    .start()

                expect(image).toEventually(beNil())
            }
            it(&amp;quot;eventually returns an image.&amp;quot;) {
                var image: UIImage? = nil
                viewModel.getPreviewImage()
                    .on(next: { image = $0 })
                    .start()

                expect(image).toEventuallyNot(beNil())
            }
            it(&amp;quot;returns an image on the main thread.&amp;quot;) {
                var onMainThread = false
                viewModel.getPreviewImage()
                    .skip(1) // Skips the first nil.
                    .on(next: { _ in onMainThread = NSThread.isMainThread() })
                    .start()

                expect(onMainThread).toEventually(beTrue())
            }
            context(&amp;quot;with an image already downloaded&amp;quot;) {
                it(&amp;quot;immediately returns the image omitting the first nil.&amp;quot;) {
                    var image: UIImage? = nil
                    viewModel.getPreviewImage().start(completed: {
                        viewModel.getPreviewImage()
                            .take(1)
                            .on(next: { image = $0 })
                            .start()
                    })

                    expect(image).toEventuallyNot(beNil())
                }
            }
            context(&amp;quot;on error&amp;quot;) {
                it(&amp;quot;returns nil.&amp;quot;) {
                    var image: UIImage? = image1x1
                    let viewModel = ImageSearchTableViewCellModel(
                        image: dummyResponse.images[0],
                        network: ErrorStubNetwork())
                    viewModel.getPreviewImage()
                        .skip(1) // Skips the first nil.
                        .on(next: { image = $0 })
                        .start()

                    expect(image).toEventually(beNil())
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;requestImage&lt;/code&gt; method of &lt;code&gt;StubNetwork&lt;/code&gt; returns a &lt;code&gt;SignalProducer&lt;/code&gt; sending the dummy image. That of &lt;code&gt;ErrorStubNetwork&lt;/code&gt; returns a &lt;code&gt;SignalProducer&lt;/code&gt; sending an error. Before adding new unit tests, refactoring is done on &lt;code&gt;spec&lt;/code&gt;. The existing tests are grouped within &lt;code&gt;describe(&amp;quot;Constant values&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Five new unit tests for &lt;code&gt;getPreviewImage&lt;/code&gt; method are added to &lt;code&gt;describe(&amp;quot;Preview image&amp;quot;)&lt;/code&gt; group. The first test checks the &lt;code&gt;SignalProducer&lt;/code&gt; sends &lt;code&gt;nil&lt;/code&gt; as its first event. The second test checks it sends an image as the succeeding event. The third test checks the image event is sent on the main thread. The forth test checks a cached image is sent immediately in case the cache exists. The test is grouped within &lt;code&gt;context&lt;/code&gt; because the test is in the certain condition. The fifth test checks that an error on &lt;code&gt;Networking&lt;/code&gt; instance is converted and sent as &lt;code&gt;nil&lt;/code&gt;. This test is also grouped within &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Input &lt;code&gt;Command-U&lt;/code&gt; and run the unit tests. Move on to the next section to implement our View.&lt;/p&gt;

&lt;h2 id=&#34;view:e195b0dcdb12716d5c3e3911b931c7d6&#34;&gt;View&lt;/h2&gt;

&lt;p&gt;First, we are going to add an extension to &lt;code&gt;UITableViewCell&lt;/code&gt; in the same way as we did to &lt;code&gt;NSObject&lt;/code&gt;. Add &lt;code&gt;RACUtil.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleView&lt;/code&gt; group. Make sure that it is added to &lt;code&gt;ExampleView&lt;/code&gt; target. In the extension, &lt;code&gt;rac_prepareForReuseSignal&lt;/code&gt;, as ReactiveCocoa Objective-C API, is transformed to a corresponding Swift instance. It sends an event with an empty tuple when &lt;code&gt;prepareForReuse&lt;/code&gt; of &lt;code&gt;UITableViewCell&lt;/code&gt; is invoked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RACUtil.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
import ReactiveCocoa

internal extension UITableViewCell {
    internal var racutil_prepareForReuseProducer: SignalProducer&amp;lt;(), NoError&amp;gt;  {
        return self.rac_prepareForReuseSignal
            .toSignalProducer()
            .map { _ in }
            .flatMapError { _ in SignalProducer(value: ()) }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, modify &lt;code&gt;ImageSearchTableViewCell&lt;/code&gt; to update the image view when &lt;code&gt;viewModel&lt;/code&gt; property is set. The signal of &lt;code&gt;getPreviewImage&lt;/code&gt; is terminated upon reuse of the cell for another table row to avoid updating the cell with the image used for the previous row.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchTableViewCell.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
import ExampleViewModel
import ReactiveCocoa

internal final class ImageSearchTableViewCell: UITableViewCell {
    internal var viewModel: ImageSearchTableViewCellModeling? {
        didSet {
            tagLabel.text = viewModel?.tagText
            imageSizeLabel.text = viewModel?.pageImageSizeText

            if let viewModel = viewModel {
                viewModel.getPreviewImage()
                    .takeUntil(self.racutil_prepareForReuseProducer)
                    .on(next: { self.previewImageView.image = $0 })
                    .start()
            }
            else {
                previewImageView.image = nil
            }
        }
    }

    @IBOutlet weak var previewImageView: UIImageView!
    @IBOutlet weak var tagLabel: UILabel!
    @IBOutlet weak var imageSizeLabel: UILabel!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type &lt;code&gt;Command-R&lt;/code&gt; and run the app. You will see each image view is filled like the following image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://yoichitgy.github.io/images/post/2015-09/SwinjectMVVMExampleCellsWithImagesScreenshot.png&#34; alt=&#34;SwinjectMVVMExample Images Displayed in Table View Cells&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At last, add &lt;code&gt;ImageSearchTableViewCellSpec.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleViewTests&lt;/code&gt; group. Make sure that it is added to &lt;code&gt;ExampleViewTests&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchTableViewCellSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
import ReactiveCocoa
import ExampleViewModel
@testable import ExampleView

class ImageSearchTableViewCellSpec: QuickSpec {
    class MockViewModel: ImageSearchTableViewCellModeling {
        let id: UInt64 = 0
        let pageImageSizeText = &amp;quot;&amp;quot;
        let tagText = &amp;quot;&amp;quot;

        var getPreviewImageStarted = false

        func getPreviewImage() -&amp;gt; SignalProducer&amp;lt;UIImage?, NoError&amp;gt; {
            return SignalProducer&amp;lt;UIImage?, NoError&amp;gt; { observer, _ in
                self.getPreviewImageStarted = true
                observer.sendCompleted()
            }
        }
    }

    override func spec() {
        it(&amp;quot;starts getPreviewImage signal producer when its view model is set.&amp;quot;) {
            let viewModel = MockViewModel()
            let view = createTableViewCell()

            expect(viewModel.getPreviewImageStarted) == false
            view.viewModel = viewModel
            expect(viewModel.getPreviewImageStarted) == true
        }
    }
}

private func createTableViewCell() -&amp;gt; ImageSearchTableViewCell {
    let bundle = NSBundle(forClass: ImageSearchTableViewCell.self)
    let storyboard = UIStoryboard(name: &amp;quot;Main&amp;quot;, bundle: bundle)
    let tableViewController = storyboard
        .instantiateViewControllerWithIdentifier(&amp;quot;ImageSearchTableViewController&amp;quot;)
        as! ImageSearchTableViewController
    return tableViewController.tableView
        .dequeueReusableCellWithIdentifier(&amp;quot;ImageSearchTableViewCell&amp;quot;)
        as! ImageSearchTableViewCell
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test checks, with a mock of &lt;code&gt;ImageSearchTableViewCellModeling&lt;/code&gt;, &lt;code&gt;getPreviewImage&lt;/code&gt; is called when &lt;code&gt;viewModel&lt;/code&gt; property of &lt;code&gt;ImageSearchTableViewCell&lt;/code&gt; is set.&lt;/p&gt;

&lt;p&gt;Input &lt;code&gt;Command-U&lt;/code&gt; to run the test. Passed! We have finished implementing the table view displaying images that are asynchronously loaded from the network. Remember now we have not only the implementation but also the unit tests that give us confidence to keep developing working software!&lt;/p&gt;

&lt;h2 id=&#34;conclusion:e195b0dcdb12716d5c3e3911b931c7d6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this blog post, we implemented the feature to asynchronously load an image to &lt;code&gt;UIImageView&lt;/code&gt; in MVVM architecture. We learned how to add new methods to protocols and their conforming classes with the update of unit tests in Model, ViewModel and View. The dependency injection to ViewModel was also updated during the implementation. ReactiveCocoa was used throughout the Model, ViewModel and View to pass and handle events in the abstracted way.&lt;/p&gt;

&lt;p&gt;Through the series of the blog posts, we learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part 1: The concepts and basics of MVVM and ReactiveCocoa.&lt;/li&gt;
&lt;li&gt;Part 2: The setup of Xcode project composed of MVVM framework targets with external frameworks installed via &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Part 3: The model design using protocols to decouple our app from external system, e.g. network.&lt;/li&gt;
&lt;li&gt;Part 4: ViewModel and View implementation with dependencies injected by AppDelegate.&lt;/li&gt;
&lt;li&gt;Part 5: Modification of Model, ViewModel and View to add a new feature with unit tests updated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We did not only develop the example app but wrote unit tests&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e195b0dcdb12716d5c3e3911b931c7d6:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e195b0dcdb12716d5c3e3911b931c7d6:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; that use stubs and mocks of protocols representing MVVM interfaces. Keeping the cycle to add protocols, implementations, and unit tests in MVVM architecture, we are always confident to develop the project further. Decoupling of Model, View and ViewModel by using the abstracted events of &lt;a href=&#34;https://github.com/Swinject/Swinject&#34;&gt;ReactiveCocoa&lt;/a&gt; and dependency injection with &lt;a href=&#34;https://github.com/Swinject/Swinject&#34;&gt;Swinject&lt;/a&gt; is the key to the cycle.&lt;/p&gt;

&lt;p&gt;The series of the blog posts ends here, but &lt;a href=&#34;https://github.com/Swinject/SwinjectMVVMExample&#34;&gt;the project in the GitHub repository&lt;/a&gt; has further development to show image details, to receive more image data when scrolled to the bottom of the table, to handle errors and to add localization. If you are interested, check the project. Adding a star to &lt;a href=&#34;https://github.com/Swinject/Swinject&#34;&gt;Swinject project&lt;/a&gt; is highly appreciated.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e195b0dcdb12716d5c3e3911b931c7d6:1&#34;&gt;The blog posts always wrote unit tests after implementing features, but actually tests should be written first or together with the feature implementation.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e195b0dcdb12716d5c3e3911b931c7d6:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dependency Injection in MVVM Architecture with ReactiveCocoa Part 3: Designing the Model</title>
      <link>https://yoichitgy.github.io/post/dependency-injection-in-mvvm-architecture-with-reactivecocoa-part-3-designing-the-model/</link>
      <pubDate>Mon, 31 Aug 2015 01:10:55 +0900</pubDate>
      
      <guid>https://yoichitgy.github.io/post/dependency-injection-in-mvvm-architecture-with-reactivecocoa-part-3-designing-the-model/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Updated on Nov 20, 2015&lt;/strong&gt; to migrate to ReactiveCocoa v4.0.0 alpha 3, Alamofire v3.x and Himotoki v1.3.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated on Oct 1, 2015&lt;/strong&gt; for the release versions of Swift 2 and Xcode 7.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href=&#34;https://yoichitgy.github.io/post/dependency-injection-in-mvvm-architecture-with-reactivecocoa-part-2-project-setup/&#34;&gt;the last blog post&lt;/a&gt;, we setup an Xcode project to develop an app composed of Model, View and ViewModel frameworks. In this blog post, we are going to develop the Model part in the MVVM architecture. We will learn how to design our Model consisting of entities and services with dependencies injected. Decoupling of the dependencies is the advantage of the MVVM architecture. &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa&#34;&gt;ReactiveCocoa&lt;/a&gt; is used for event handling, which is essential to decouple Model, View and ViewModel in the MVVM architecture. We will also learn how to use &lt;a href=&#34;https://github.com/ikesyo/Himotoki&#34;&gt;Himotoki&lt;/a&gt; to define mappings from JSON data to Swift types.&lt;/p&gt;

&lt;p&gt;The source code used in the blog posts is available at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectMVVMExample&#34;&gt;SwinjectMVVMExample&lt;/a&gt;: Complete version of the project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoichitgy/SwinjectMVVMExample_ForBlog&#34;&gt;SwinjectMVVMExample_ForBlog&lt;/a&gt;: Simplified version of the project to follow the blog posts (except updates of Xcode and frameworks).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://yoichitgy.github.io/images/post/2015-08/SwinjectMVVMExampleScreenRecord.gif&#34; alt=&#34;SwinjectMVVMExample ScreenRecord&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;notice:10506297541d45beaf70d97ca007d866&#34;&gt;Notice&lt;/h2&gt;

&lt;p&gt;To use with Swift 2 and Xcode 7, ReactiveCocoa &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/releases&#34;&gt;version 4.0&lt;/a&gt; is used though it is still in an alpha version at the moment. Notice that ReactiveCocoa 3.0 has functional style APIs like &lt;code&gt;|&amp;gt; map&lt;/code&gt; or &lt;code&gt;|&amp;gt; flatMap&lt;/code&gt;, but version 4 APIs are in protocol oriented and fluent style like &lt;code&gt;.map()&lt;/code&gt; or &lt;code&gt;.flatMap()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;himotoki:10506297541d45beaf70d97ca007d866&#34;&gt;Himotoki&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ikesyo/Himotoki&#34;&gt;Himotoki&lt;/a&gt; is a type-safe JSON decoding library for Swift. It maps JSON elements to properties of a type with a simple definition of the mappings as &lt;code&gt;Decodable&lt;/code&gt; protocol. The advantage of Himotoki is the support of mappings to immutable (&lt;code&gt;let&lt;/code&gt;) properties.&lt;/p&gt;

&lt;p&gt;Its usage is simple. Assume that you want to map JSON like &lt;code&gt;{ &amp;quot;some_name&amp;quot;: &amp;quot;Himotoki&amp;quot;, &amp;quot;some_value&amp;quot;: 1 }&lt;/code&gt; to &lt;code&gt;SomeValue&lt;/code&gt; type. To define the mappings, make &lt;code&gt;SomeValue&lt;/code&gt; type conform &lt;code&gt;Decodable&lt;/code&gt; protocol.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct SomeValue {
    let name: String
    let value: Int
}

extension SomeValue: Decodable {
    static func decode(e: Extractor) throws -&amp;gt; Group {
        return try SomeValue(
            name: e &amp;lt;| &amp;quot;some_name&amp;quot;,
            value: e &amp;lt;| &amp;quot;some_value&amp;quot;
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;decode&lt;/code&gt; function, the mappings are defined as the parameters to &lt;code&gt;build&lt;/code&gt; function. Here &lt;code&gt;some_name&lt;/code&gt; is mapped to &lt;code&gt;name&lt;/code&gt; property of &lt;code&gt;SomeValue&lt;/code&gt;, and &lt;code&gt;some_value&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; property. The mappings are defined in the order as the properties of &lt;code&gt;SomeValue&lt;/code&gt; type are defined.&lt;/p&gt;

&lt;p&gt;To get an instance mapped from JSON data, call &lt;code&gt;decode&lt;/code&gt; function with JSON data as &lt;code&gt;[String: AnyObject]&lt;/code&gt; returned from Alamofire or NSJSONSerialization.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func testSomeValue() {
    // JSON data returned from Alamofire or NSJSONSerialization.
    let json: [String: AnyObject] = [&amp;quot;some_name&amp;quot;: &amp;quot;Himotoki&amp;quot;, &amp;quot;some_value&amp;quot;: 1]

    let v: SomeValue? = try? decode(json)
    XCTAssert(v != nil)
    XCTAssert(v?.name == &amp;quot;Himotoki&amp;quot;)
    XCTAssert(v?.value == 1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Himotoki, you can reduce the code to handle JSON data&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10506297541d45beaf70d97ca007d866:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10506297541d45beaf70d97ca007d866:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. It also supports nested data, optional parameters and more. Refer to &lt;a href=&#34;https://github.com/ikesyo/Himotoki&#34;&gt;the project page&lt;/a&gt; for the details.&lt;/p&gt;

&lt;h2 id=&#34;pixabay-api-spec:10506297541d45beaf70d97ca007d866&#34;&gt;Pixabay API Spec&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&#34;https://pixabay.com/api/docs/&#34;&gt;the API documentation of Pixabay&lt;/a&gt;, a JSON response from Pixabay server is in the following format. It contains an array of image information (&lt;code&gt;hits&lt;/code&gt;), and the numbers of total images (&lt;code&gt;total&lt;/code&gt;) and available images (&lt;code&gt;totalHits&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;total&amp;quot;: 12274,
    &amp;quot;totalHits&amp;quot;: 240,
    &amp;quot;hits&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 11574,
            &amp;quot;pageURL&amp;quot;: &amp;quot;https://pixabay.com/en/sonnenblumen-sonnenblumenfeld-flora-11574/&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;photo&amp;quot;,
            &amp;quot;tags&amp;quot;: &amp;quot;sunflower, sunflower field, flora&amp;quot;,
            &amp;quot;previewURL&amp;quot;: &amp;quot;https://pixabay.com/static/uploads/photo/2012/01/07/21/56/sunflower-11574_150.jpg&amp;quot;,
            &amp;quot;previewWidth&amp;quot;: 150,
            &amp;quot;previewHeight&amp;quot;: 92,
            &amp;quot;webformatURL&amp;quot;: &amp;quot;https://pixabay.com/get/3b4f5d71752e6ce9cbcf/1356479243/aca42219d23fd9fe0cc6f1cc_640.jpg&amp;quot;,
            &amp;quot;webformatWidth&amp;quot;: 640,
            &amp;quot;webformatHeight&amp;quot;: 396,
            &amp;quot;imageWidth&amp;quot;: 1280,
            &amp;quot;imageHeight&amp;quot;: 792,
            &amp;quot;views&amp;quot;: 10928,
            &amp;quot;downloads&amp;quot;: 1649,
            &amp;quot;likes&amp;quot;: 70,
            &amp;quot;user&amp;quot;: &amp;quot;WikiImages&amp;quot;
        },
        {
            &amp;quot;id&amp;quot;: &amp;quot;256&amp;quot;,
            &amp;quot;pageURL&amp;quot;: &amp;quot;https://pixabay.com/en/example-image-256/&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;photo&amp;quot;,
            // ... etc.
        },
        //... 18 more hits for page number 1
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;model-design-overview:10506297541d45beaf70d97ca007d866&#34;&gt;Model Design Overview&lt;/h2&gt;

&lt;p&gt;We are going to design our Model to be composed of entities and services. In short, an entity is a concept or object that exists in a model&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10506297541d45beaf70d97ca007d866:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10506297541d45beaf70d97ca007d866:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. A service is a stateless operation that does not fit in an entity.&lt;/p&gt;

&lt;p&gt;To decouple ViewModel and Model, and Model and external system, the interfaces are defined by protocols. In the diagram below, &lt;code&gt;ImageSearching&lt;/code&gt; and &lt;code&gt;Networking&lt;/code&gt; are protocols. &lt;code&gt;ImageSearch&lt;/code&gt; and &lt;code&gt;Network&lt;/code&gt; are their implementations conforming the protocols. &lt;code&gt;ViewModel&lt;/code&gt; accesses &lt;code&gt;Model&lt;/code&gt; through &lt;code&gt;ImageSearching&lt;/code&gt; protocol, and its implementation &lt;code&gt;ImageSearch&lt;/code&gt; accesses the external system through &lt;code&gt;Networking&lt;/code&gt; protocol. The external system raises events with JSON data. The data are converted to &lt;code&gt;ResponseEntity&lt;/code&gt; and &lt;code&gt;ImageEntity&lt;/code&gt; by &lt;code&gt;ImageSearch&lt;/code&gt; when the events are propagated to &lt;code&gt;ViewModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://yoichitgy.github.io/images/post/2015-08/SwinjectMVVMExampleModelDesign.png&#34; alt=&#34;Model Design&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;entities:10506297541d45beaf70d97ca007d866&#34;&gt;Entities&lt;/h2&gt;

&lt;p&gt;In this section, we are going to define the entities representing an image and response obtained from Pixabay. Add &lt;code&gt;ImageEntity.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleModel&lt;/code&gt; target. To make sure the file is added to the target, right click on &lt;code&gt;ExampleModel&lt;/code&gt; group (folder icon) in Project Navigator, and choose &lt;code&gt;New File...&lt;/code&gt; then &lt;code&gt;Swift File&lt;/code&gt;. When Xcode asks targets to add the file to, check only &lt;code&gt;ExampleModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageEntity.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Himotoki

public struct ImageEntity {
    public let id: UInt64

    public let pageURL: String
    public let pageImageWidth: Int
    public let pageImageHeight: Int

    public let previewURL: String
    public let previewWidth: Int
    public let previewHeight: Int

    public let imageURL: String
    public let imageWidth: Int
    public let imageHeight: Int

    public let viewCount: Int64
    public let downloadCount: Int64
    public let likeCount: Int64
    public let tags: [String]
    public let username: String
}

// MARK: Decodable
extension ImageEntity: Decodable {
    public static func decode(e: Extractor) throws -&amp;gt; ImageEntity {
        let splitCSV: String -&amp;gt; [String] = { csv in
            csv.characters
                .split { $0 == &amp;quot;,&amp;quot; }
                .map {
                    String($0).stringByTrimmingCharactersInSet(
                        NSCharacterSet.whitespaceCharacterSet())
                }
        }

        return try ImageEntity(
            id: e &amp;lt;| &amp;quot;id&amp;quot;,

            pageURL: e &amp;lt;| &amp;quot;pageURL&amp;quot;,
            pageImageWidth: e &amp;lt;| &amp;quot;imageWidth&amp;quot;,
            pageImageHeight: e &amp;lt;| &amp;quot;imageHeight&amp;quot;,

            previewURL: e &amp;lt;| &amp;quot;previewURL&amp;quot;,
            previewWidth: e &amp;lt;| &amp;quot;previewWidth&amp;quot;,
            previewHeight: e &amp;lt;| &amp;quot;previewHeight&amp;quot;,

            imageURL: e &amp;lt;| &amp;quot;webformatURL&amp;quot;,
            imageWidth: e &amp;lt;| &amp;quot;webformatWidth&amp;quot;,
            imageHeight: e &amp;lt;| &amp;quot;webformatHeight&amp;quot;,

            viewCount: e &amp;lt;| &amp;quot;views&amp;quot;,
            downloadCount: e &amp;lt;| &amp;quot;downloads&amp;quot;,
            likeCount: e &amp;lt;| &amp;quot;likes&amp;quot;,
            tags: (try? e &amp;lt;| &amp;quot;tags&amp;quot;).map(splitCSV) ?? [],
            username: e &amp;lt;| &amp;quot;user&amp;quot;
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that &lt;code&gt;ImageEntity&lt;/code&gt; is defined as a &lt;code&gt;struct&lt;/code&gt; with its properties immutable. The immutability keeps the users of the entity safe&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10506297541d45beaf70d97ca007d866:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10506297541d45beaf70d97ca007d866:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Accessibility of the type is &lt;code&gt;public&lt;/code&gt; because it is referenced from &lt;code&gt;ExampleViewModel&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;Some properties of &lt;code&gt;ImageEntity&lt;/code&gt; are named differently from the JSON elements to match Swift naming convention and our app. The properties &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;viewCount&lt;/code&gt;, &lt;code&gt;downloadCount&lt;/code&gt; and &lt;code&gt;likeCount&lt;/code&gt; are declared as &lt;code&gt;UInt64&lt;/code&gt; or &lt;code&gt;Int64&lt;/code&gt; to ensure they accept large values even in 32-bit system. JSON element &lt;code&gt;tags&lt;/code&gt; as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Comma-separated_values&#34;&gt;CSV&lt;/a&gt; format string is mapped to an array of split strings by &lt;code&gt;(try? e &amp;lt;| &amp;quot;tags&amp;quot;).map(splitCSV)&lt;/code&gt;. By applying &lt;code&gt;?? []&lt;/code&gt; to the returned value, an empty array is assigned instead of &lt;code&gt;nil&lt;/code&gt; if the &lt;code&gt;tags&lt;/code&gt; JSON element is missing.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;ResponseEntity.swift&lt;/code&gt; to &lt;code&gt;ExampleModel&lt;/code&gt; target with the following text contents. Here &lt;code&gt;&amp;lt;||&lt;/code&gt; operator is used to map an array. The &lt;code&gt;total&lt;/code&gt; element in the JSON is ignored. If we find it is necessary, we can add it later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ResponseEntity.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Himotoki

public struct ResponseEntity {
    public let totalCount: Int64
    public let images: [ImageEntity]
}

// MARK: Decodable
extension ResponseEntity: Decodable {
    public static func decode(e: Extractor) throws -&amp;gt; ResponseEntity {
        return try ResponseEntity(
            totalCount: e &amp;lt;| &amp;quot;totalHits&amp;quot;,
            images: e &amp;lt;|| &amp;quot;hits&amp;quot;
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test &lt;code&gt;ImageEntity&lt;/code&gt;, add &lt;code&gt;Dummy.swift&lt;/code&gt; and &lt;code&gt;ImageEntitySpec.swift&lt;/code&gt; with the following contents to &lt;code&gt;ExampleModelTests&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dummy.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let imageJSON: [String: AnyObject] = [
    &amp;quot;id&amp;quot;: 12345,
    &amp;quot;pageURL&amp;quot;: &amp;quot;https://somewhere.com/page/&amp;quot;,
    &amp;quot;imageWidth&amp;quot;: 2000,
    &amp;quot;imageHeight&amp;quot;: 1000,
    &amp;quot;previewURL&amp;quot;: &amp;quot;https://somewhere.com/preview.jpg&amp;quot;,
    &amp;quot;previewWidth&amp;quot;: 200,
    &amp;quot;previewHeight&amp;quot;: 100,
    &amp;quot;webformatURL&amp;quot;: &amp;quot;https://somewhere.com/image.jpg&amp;quot;,
    &amp;quot;webformatWidth&amp;quot;: 600,
    &amp;quot;webformatHeight&amp;quot;: 300,
    &amp;quot;views&amp;quot;: 54321,
    &amp;quot;downloads&amp;quot;: 4321,
    &amp;quot;likes&amp;quot;: 321,
    &amp;quot;tags&amp;quot;: &amp;quot;a, b c, d &amp;quot;,
    &amp;quot;user&amp;quot;: &amp;quot;Swinject&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ImageEntitySpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
import Himotoki
@testable import ExampleModel

class ImageEntitySpec: QuickSpec {
    override func spec() {
        it(&amp;quot;parses JSON data to create a new instance.&amp;quot;) {
            let image: ImageEntity? = try? decode(imageJSON)

            expect(image).notTo(beNil())
            expect(image?.id) == 12345
            expect(image?.pageURL) == &amp;quot;https://somewhere.com/page/&amp;quot;
            expect(image?.pageImageWidth) == 2000
            expect(image?.pageImageHeight) == 1000
            expect(image?.previewURL) == &amp;quot;https://somewhere.com/preview.jpg&amp;quot;
            expect(image?.previewWidth) == 200
            expect(image?.previewHeight) == 100
            expect(image?.imageURL) == &amp;quot;https://somewhere.com/image.jpg&amp;quot;
            expect(image?.imageWidth) == 600
            expect(image?.imageHeight) == 300
            expect(image?.viewCount) == 54321
            expect(image?.downloadCount) == 4321
            expect(image?.likeCount) == 321
            expect(image?.tags) == [&amp;quot;a&amp;quot;, &amp;quot;b c&amp;quot;, &amp;quot;d&amp;quot;]
            expect(image?.username) == &amp;quot;Swinject&amp;quot;
        }
        it(&amp;quot;gets an empty array if tags element is nil.&amp;quot;) {
            var missingJSON = imageJSON
            missingJSON[&amp;quot;tags&amp;quot;] = nil
            let image: ImageEntity? = try? decode(missingJSON)

            expect(image).notTo(beNil())
            expect(image?.tags.isEmpty).to(beTrue())
        }
        it(&amp;quot;throws an error if any of JSON elements except tags is missing.&amp;quot;) {
            for key in imageJSON.keys where key != &amp;quot;tags&amp;quot; {
                var missingJSON = imageJSON
                missingJSON[key] = nil
                let image: ImageEntity? = try? decode(missingJSON)

                expect(image).to(beNil())
            }
        }
        it(&amp;quot;ignores an extra JOSN element.&amp;quot;) {
            var extraJSON = imageJSON
            extraJSON[&amp;quot;extraKey&amp;quot;] = &amp;quot;extra element&amp;quot;
            let image: ImageEntity? = try? decode(extraJSON)

            expect(image).notTo(beNil())
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;Dummy.swift&lt;/code&gt;, a dummy instance of JSON data is defined as &lt;code&gt;imageJSON&lt;/code&gt;. Since Himotoki handles JSON data as &lt;code&gt;[String: AnyObject]&lt;/code&gt; type returned from Alamofire or NSJSONSerialization, &lt;code&gt;imageJSON&lt;/code&gt; is defined as &lt;code&gt;[String: AnyObject]&lt;/code&gt;, not as &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;it(&amp;quot;parses JSON data to create a new instance.&amp;quot;)&lt;/code&gt; checks that all the properties of &lt;code&gt;ImageEntity&lt;/code&gt; are mapped from the JSON data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;it(&amp;quot;gets an empty array if tags element is nil.&amp;quot;)&lt;/code&gt; checks that &lt;code&gt;tags&lt;/code&gt; property is set to an empty array if &lt;code&gt;tags&lt;/code&gt; element is missing in the JSON data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;it(&amp;quot;throws an error if any of JSON elements except tags is missing.&amp;quot;)&lt;/code&gt; checks that &lt;code&gt;decode&lt;/code&gt; function throws an error if any of the JSON elements except &lt;code&gt;tags&lt;/code&gt; is missing. Incorrect or broken JSON data can be detected to see whether the returned value from &lt;code&gt;try?&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;it(&amp;quot;ignores an extra JOSN element.&amp;quot;)&lt;/code&gt; checks that &lt;code&gt;decode&lt;/code&gt; function returns an &lt;code&gt;ImageEntity&lt;/code&gt; instance even if an extra JSON element exists. Ignoring extra elements, our JSON mapping is stable for future changes on the Pixabay API.&lt;/p&gt;

&lt;p&gt;Next add &lt;code&gt;ResponseEntitySpec.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleModelTests&lt;/code&gt; target. The test is simple as you see.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ResponseEntitySpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
import Himotoki
@testable import ExampleModel

class ResponseEntitySpec: QuickSpec {
    override func spec() {
        let json: [String: AnyObject] = [
            &amp;quot;totalHits&amp;quot;: 123,
            &amp;quot;hits&amp;quot;: [imageJSON, imageJSON]
        ]

        it(&amp;quot;parses JSON data to create a new instance.&amp;quot;) {
            let response: ResponseEntity? = try? decode(json)

            expect(response).notTo(beNil())
            expect(response?.totalCount) == 123
            expect(response?.images.count) == 2
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type &lt;code&gt;Command-U&lt;/code&gt; to run the unit tests. Passed. The tests passed without any problems, but, in actual development, we iterate fixing the entities and tests until the tests pass.&lt;/p&gt;

&lt;h2 id=&#34;network-service:10506297541d45beaf70d97ca007d866&#34;&gt;Network Service&lt;/h2&gt;

&lt;p&gt;As we did in &lt;a href=&#34;https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-1/&#34;&gt;the simple weather app example&lt;/a&gt;, we are going to encapsulate Alamofire within &lt;code&gt;Network&lt;/code&gt; type conforming &lt;code&gt;Networking&lt;/code&gt; protocol. This time, we use ReactiveCocoa to handle the network event. Add &lt;code&gt;Networking.swift&lt;/code&gt; and &lt;code&gt;Network.swift&lt;/code&gt; with the following contents to &lt;code&gt;ExampleModel&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Networking.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa

public protocol Networking {
    func requestJSON(url: String, parameters: [String : AnyObject]?)
        -&amp;gt; SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Network.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa
import Alamofire

public final class Network: Networking {
    private let queue = dispatch_queue_create(
        &amp;quot;SwinjectMMVMExample.ExampleModel.Network.Queue&amp;quot;,
        DISPATCH_QUEUE_SERIAL)

    public init() { }

    public func requestJSON(url: String, parameters: [String : AnyObject]?)
        -&amp;gt; SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;
    {
        return SignalProducer { observer, disposable in
            let serializer = Alamofire.Request.JSONResponseSerializer()
            Alamofire.request(.GET, url, parameters: parameters)
                .response(queue: self.queue, responseSerializer: serializer) {
                    response in
                    switch response.result {
                    case .Success(let value):
                        observer.sendNext(value)
                        observer.sendCompleted()
                    case .Failure(let error):
                        observer.sendFailed(NetworkError(error: error))
                    }
                }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;a href=&#34;https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-1/&#34;&gt;the previous example&lt;/a&gt;, the network service took a callback to pass a response. This time, &lt;code&gt;requestJSON&lt;/code&gt; method returns &lt;code&gt;SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;&lt;/code&gt; to deliver network events to its observer. The &lt;code&gt;SignalProducer&lt;/code&gt; takes a generic argument as &lt;code&gt;AnyObject&lt;/code&gt; because Alamofire (or NSJSONSerialization) returns JSON data as &lt;code&gt;AnyObject&lt;/code&gt; that is actually an array or dictionary.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;requestJSON&lt;/code&gt; method creates &lt;code&gt;SignalProducer&lt;/code&gt; instance with its trailing closure, and returns the instance. Within the closure, a response event of Alamofire is converted to a ReactiveCocoa event by calling &lt;code&gt;sendNext&lt;/code&gt;, &lt;code&gt;sendCompleted&lt;/code&gt; and &lt;code&gt;sendFailed&lt;/code&gt;. Notice that the closure passed to &lt;code&gt;SignalProducer&lt;/code&gt; is not actually invoked until &lt;code&gt;start&lt;/code&gt; method is called on the &lt;code&gt;SignalProducer&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;A dispatch queue is passed to Alamofire to run the response in a background thread because Alamofire by default runs the response in the main thread (main queue).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sendFailed&lt;/code&gt; method takes an instance of &lt;code&gt;NetworkError&lt;/code&gt; type. Add &lt;code&gt;NetworkError.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleModel&lt;/code&gt; target. It converts an &lt;code&gt;NSError&lt;/code&gt; passed from Alamofire to our own error type&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10506297541d45beaf70d97ca007d866:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10506297541d45beaf70d97ca007d866:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NetworkError.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation

public enum NetworkError: ErrorType {
    /// Unknown or not supported error.
    case Unknown

    /// Not connected to the internet.
    case NotConnectedToInternet

    /// International data roaming turned off.
    case InternationalRoamingOff

    /// Cannot reach the server.
    case NotReachedServer

    /// Connection is lost.
    case ConnectionLost

    /// Incorrect data returned from the server.
    case IncorrectDataReturned

    internal init(error: NSError) {
        if error.domain == NSURLErrorDomain {
            switch error.code {
            case NSURLErrorUnknown:
                self = .Unknown
            case NSURLErrorCancelled:
                self = .Unknown // Cancellation is not used in this project.
            case NSURLErrorBadURL:
                self = .IncorrectDataReturned // Because it is caused by a bad URL returned in a JSON response from the server.
            case NSURLErrorTimedOut:
                self = .NotReachedServer
            case NSURLErrorUnsupportedURL:
                self = .IncorrectDataReturned
            case NSURLErrorCannotFindHost, NSURLErrorCannotConnectToHost:
                self = .NotReachedServer
            case NSURLErrorDataLengthExceedsMaximum:
                self = .IncorrectDataReturned
            case NSURLErrorNetworkConnectionLost:
                self = .ConnectionLost
            case NSURLErrorDNSLookupFailed:
                self = .NotReachedServer
            case NSURLErrorHTTPTooManyRedirects:
                self = .Unknown
            case NSURLErrorResourceUnavailable:
                self = .IncorrectDataReturned
            case NSURLErrorNotConnectedToInternet:
                self = .NotConnectedToInternet
            case NSURLErrorRedirectToNonExistentLocation, NSURLErrorBadServerResponse:
                self = .IncorrectDataReturned
            case NSURLErrorUserCancelledAuthentication, NSURLErrorUserAuthenticationRequired:
                self = .Unknown
            case NSURLErrorZeroByteResource, NSURLErrorCannotDecodeRawData, NSURLErrorCannotDecodeContentData:
                self = .IncorrectDataReturned
            case NSURLErrorCannotParseResponse:
                self = .IncorrectDataReturned
            case NSURLErrorInternationalRoamingOff:
                self = .InternationalRoamingOff
            case NSURLErrorCallIsActive, NSURLErrorDataNotAllowed, NSURLErrorRequestBodyStreamExhausted:
                self = .Unknown
            case NSURLErrorFileDoesNotExist, NSURLErrorFileIsDirectory:
                self = .IncorrectDataReturned
            case
            NSURLErrorNoPermissionsToReadFile,
            NSURLErrorSecureConnectionFailed,
            NSURLErrorServerCertificateHasBadDate,
            NSURLErrorServerCertificateUntrusted,
            NSURLErrorServerCertificateHasUnknownRoot,
            NSURLErrorServerCertificateNotYetValid,
            NSURLErrorClientCertificateRejected,
            NSURLErrorClientCertificateRequired,
            NSURLErrorCannotLoadFromNetwork,
            NSURLErrorCannotCreateFile,
            NSURLErrorCannotOpenFile,
            NSURLErrorCannotCloseFile,
            NSURLErrorCannotWriteToFile,
            NSURLErrorCannotRemoveFile,
            NSURLErrorCannotMoveFile,
            NSURLErrorDownloadDecodingFailedMidStream,
            NSURLErrorDownloadDecodingFailedToComplete:
                self = .Unknown
            default:
                self = .Unknown
            }
        }
        else {
            self = .Unknown
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add unit tests for the &lt;code&gt;Network&lt;/code&gt; type. Add &lt;code&gt;NetworkSpec.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleModelTests&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NetworkSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
@testable import ExampleModel

class NetworkSpec: QuickSpec {
    override func spec() {
        var network: Network!
        beforeEach {
            network = Network()
        }

        describe(&amp;quot;JSON&amp;quot;) {
            it(&amp;quot;eventually gets JSON data as specified with parameters.&amp;quot;) {
                var json: [String: AnyObject]? = nil
                let url = &amp;quot;https://httpbin.org/get&amp;quot;
                network.requestJSON(url, parameters: [&amp;quot;a&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;x&amp;quot;: &amp;quot;y&amp;quot;])
                    .on(next: { json = $0 as? [String: AnyObject] })
                    .start()

                expect(json).toEventuallyNot(beNil(), timeout: 5)
                expect((json?[&amp;quot;args&amp;quot;] as? [String: AnyObject])?[&amp;quot;a&amp;quot;] as? String)
                    .toEventually(equal(&amp;quot;b&amp;quot;), timeout: 5)
                expect((json?[&amp;quot;args&amp;quot;] as? [String: AnyObject])?[&amp;quot;x&amp;quot;] as? String)
                    .toEventually(equal(&amp;quot;y&amp;quot;), timeout: 5)
            }
            it(&amp;quot;eventually gets an error if the network has a problem.&amp;quot;) {
                var error: NetworkError? = nil
                let url = &amp;quot;https://not.existing.server.comm/get&amp;quot;
                network.requestJSON(url, parameters: [&amp;quot;a&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;x&amp;quot;: &amp;quot;y&amp;quot;])
                    .on(failed: { error = $0 })
                    .start()

                expect(error)
                    .toEventually(equal(NetworkError.NotReachedServer), timeout: 5)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;a href=&#34;https://httpbin.org/&#34;&gt;httpbin.org&lt;/a&gt; is used as a stable and simple server to test the network. It is used by &lt;a href=&#34;https://github.com/Alamofire/Alamofire/blob/1978c2c926b0eabedc858d4cde0533e00686ccd6/Tests/ResponseTests.swift&#34;&gt;the unit tests of Alamofire&lt;/a&gt; too. Access &lt;a href=&#34;https://httpbin.org/get?a=b&amp;amp;x=y&#34;&gt;https://httpbin.org/get?a=b&amp;amp;x=y&lt;/a&gt; with a browser, and you will see how it works.&lt;/p&gt;

&lt;p&gt;The first test checks the JSON response has &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;x&amp;quot;&lt;/code&gt; elements with &lt;code&gt;&amp;quot;b&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;y&amp;quot;&lt;/code&gt; values as specified in the request parameters. &lt;code&gt;json&lt;/code&gt; parameter is used to store the response from the server asynchronously. To add an observer (namely an event handler) to the &lt;code&gt;SignalProducer&lt;/code&gt; returned from &lt;code&gt;requestJSON&lt;/code&gt;, &lt;code&gt;on&lt;/code&gt; method is used with a closure to set the &lt;code&gt;json&lt;/code&gt; response. Then &lt;code&gt;start&lt;/code&gt; is called to get the &lt;code&gt;SignalProducer&lt;/code&gt; initiating its signal. The response is checked asynchronously with &lt;code&gt;toEventually&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The second test checks &lt;code&gt;NetworkError&lt;/code&gt; is sent in case of an error. To emulate an error, a URL that does not exist is passed to &lt;code&gt;requestJSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run the unit tests, and let&amp;rsquo;s move on to the next section.&lt;/p&gt;

&lt;h2 id=&#34;image-search-service:10506297541d45beaf70d97ca007d866&#34;&gt;Image Search Service&lt;/h2&gt;

&lt;p&gt;In this section, we are going to define the service to search images through Pixabay API. This is the main part of &lt;code&gt;ExampleModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, add &lt;code&gt;Pixabay.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleModel&lt;/code&gt; target. It defines the URL and parameters for the API. Please fill &lt;code&gt;apiUsername&lt;/code&gt; and &lt;code&gt;apiKey&lt;/code&gt; with &lt;a href=&#34;https://pixabay.com/api/docs/&#34;&gt;your own username and API key obtained from Pixabay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pixabay.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;internal struct Pixabay {
    internal static let apiURL = &amp;quot;https://pixabay.com/api/&amp;quot;

    internal static var requestParameters: [String: AnyObject] {
        return [
            &amp;quot;username&amp;quot;: Config.apiUsername,
            &amp;quot;key&amp;quot;: Config.apiKey,
            &amp;quot;image_type&amp;quot;: &amp;quot;photo&amp;quot;,
            &amp;quot;safesearch&amp;quot;: true,
            &amp;quot;per_page&amp;quot;: 50,
        ]
    }
}

extension Pixabay {
    private struct Config {
        private static let apiUsername = &amp;quot;&amp;quot; // Fill with your own username.
        private static let apiKey = &amp;quot;&amp;quot; // Fill with your own API key.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, add &lt;code&gt;ImageSearching.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleModel&lt;/code&gt; target. The protocol has &lt;code&gt;searchImages&lt;/code&gt; method returning &lt;code&gt;SignalProducer&lt;/code&gt; of &lt;code&gt;ResponseEntity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearching.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa

public protocol ImageSearching {
    func searchImages() -&amp;gt; SignalProducer&amp;lt;ResponseEntity, NetworkError&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Third, add &lt;code&gt;ImageSearch.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleModel&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearch.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ReactiveCocoa
import Result
import Himotoki

public final class ImageSearch: ImageSearching {
    private let network: Networking

    public init(network: Networking) {
        self.network = network
    }

    public func searchImages() -&amp;gt; SignalProducer&amp;lt;ResponseEntity, NetworkError&amp;gt; {
        let url = Pixabay.apiURL
        let parameters = Pixabay.requestParameters
        return network.requestJSON(url, parameters: parameters)
            .attemptMap { json in
                if let response = (try? decode(json)) as ResponseEntity? {
                    return Result(value: response)
                }
                else {
                    return Result(error: .IncorrectDataReturned)
                }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ImageSearch&lt;/code&gt; has dependency on &lt;code&gt;Networking&lt;/code&gt; injected through the initializer as &lt;a href=&#34;https://github.com/Swinject/Swinject/blob/master/Documentation/InjectionPatterns.md&#34;&gt;initializer injection pattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;searchImages&lt;/code&gt; method converts &lt;code&gt;SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;&lt;/code&gt; returned from &lt;code&gt;network.requestJSON&lt;/code&gt; to &lt;code&gt;SignalProducer&amp;lt;ResponseEntity, NetworkError&amp;gt;&lt;/code&gt;. To convert the &lt;code&gt;SignalProducer&lt;/code&gt;, &lt;code&gt;attemptMap&lt;/code&gt; is used. The closure passed to &lt;code&gt;attemptMap&lt;/code&gt; calls &lt;code&gt;decode&lt;/code&gt; to map the JSON data to a &lt;code&gt;ResponseEntity&lt;/code&gt; instance. If the mapping succeeds, the mapped response is returned as &lt;code&gt;Result(value: response)&lt;/code&gt;. Otherwise&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10506297541d45beaf70d97ca007d866:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10506297541d45beaf70d97ca007d866:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, an error is returned as &lt;code&gt;Result(error: .IncorrectDataReturned)&lt;/code&gt;. If you convert a value not to an error but to another value only, you can just use &lt;code&gt;map&lt;/code&gt; method on &lt;code&gt;SignalProducer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The cast of &lt;code&gt;(try? decode(json)) as ResponseEntity?&lt;/code&gt; looks irregular, but it helps Swift compiler infer that &lt;code&gt;decode&lt;/code&gt; function on &lt;code&gt;ResponseEntity&lt;/code&gt; type should be used. If the cast is &lt;code&gt;(try? decode(json)) as? ResponseEntity&lt;/code&gt;, the source code cannot be compiled.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s write unit tests. Add &lt;code&gt;ImageSearchSpec.swift&lt;/code&gt; with the following content to &lt;code&gt;ExampleModelTests&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ImageSearchSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
import ReactiveCocoa
@testable import ExampleModel

class ImageSearchSpec: QuickSpec {
    // MARK: Stub
    class GoodStubNetwork: Networking {
        func requestJSON(url: String, parameters: [String : AnyObject]?)
            -&amp;gt; SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;
        {
            var imageJSON0 = imageJSON
            imageJSON0[&amp;quot;id&amp;quot;] = 0
            var imageJSON1 = imageJSON
            imageJSON1[&amp;quot;id&amp;quot;] = 1
            let json: [String: AnyObject] = [
                &amp;quot;totalHits&amp;quot;: 123,
                &amp;quot;hits&amp;quot;: [imageJSON0, imageJSON1]
            ]

            return SignalProducer { observer, disposable in
                observer.sendNext(json)
                observer.sendCompleted()
            }.observeOn(QueueScheduler())
        }
    }

    class BadStubNetwork: Networking {
        func requestJSON(url: String, parameters: [String : AnyObject]?)
            -&amp;gt; SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;
        {
            let json = [String: AnyObject]()

            return SignalProducer { observer, disposable in
                observer.sendNext(json)
                observer.sendCompleted()
            }.observeOn(QueueScheduler())
        }
    }

    class ErrorStubNetwork: Networking {
        func requestJSON(url: String, parameters: [String : AnyObject]?)
            -&amp;gt; SignalProducer&amp;lt;AnyObject, NetworkError&amp;gt;
        {
            return SignalProducer { observer, disposable in
                observer.sendFailed(.NotConnectedToInternet)
            }.observeOn(QueueScheduler())
        }
    }

    // MARK: - Spec
    override func spec() {
        it(&amp;quot;returns images if the network works correctly.&amp;quot;) {
            var response: ResponseEntity? = nil
            let search = ImageSearch(network: GoodStubNetwork())
            search.searchImages()
                .on(next: { response = $0 })
                .start()

            expect(response).toEventuallyNot(beNil())
            expect(response?.totalCount).toEventually(equal(123))
            expect(response?.images.count).toEventually(equal(2))
            expect(response?.images[0].id).toEventually(equal(0))
            expect(response?.images[1].id).toEventually(equal(1))
        }
        it(&amp;quot;sends an error if the network returns incorrect data.&amp;quot;) {
            var error: NetworkError? = nil
            let search = ImageSearch(network: BadStubNetwork())
            search.searchImages()
                .on(failed: { error = $0 })
                .start()

            expect(error).toEventually(equal(NetworkError.IncorrectDataReturned))
        }
        it(&amp;quot;passes the error sent by the network.&amp;quot;) {
            var error: NetworkError? = nil
            let search = ImageSearch(network: ErrorStubNetwork())
            search.searchImages()
                .on(failed: { error = $0 })
                .start()

            expect(error).toEventually(equal(NetworkError.NotConnectedToInternet))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the beginning, three stubs are defined. &lt;code&gt;GoodStubNetwork&lt;/code&gt; returns a &lt;code&gt;SignalProducer&lt;/code&gt; that sends correct JSON data. &lt;code&gt;BadStubNetwork&lt;/code&gt; returns a &lt;code&gt;SignalProducer&lt;/code&gt; that sends incorrect JSON data as an empty dictionary. &lt;code&gt;ErrorStubNetwork&lt;/code&gt; returns a &lt;code&gt;SignalProducer&lt;/code&gt; that does not send JSON data but an error. All the &lt;code&gt;SignalProducer&lt;/code&gt;s send the events in a background thread emulating an asynchronous network response by specifying &lt;code&gt;.observeOn(QueueScheduler())&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;spec()&lt;/code&gt;, three unit tests (or specs) are defined. The first one checks the case that &lt;code&gt;attemptMap&lt;/code&gt; successfully converts JSON data to a &lt;code&gt;ResponseEntity&lt;/code&gt;. The second one checks the case that &lt;code&gt;attemptMap&lt;/code&gt; converts JSON data to an error. The third one checks the case that the error sent from &lt;code&gt;ErrorStubNetwork&lt;/code&gt; is passed through &lt;code&gt;ImageSearch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;Command-U&lt;/code&gt; to run the tests. Passed! We finished implementing the main part of our model in MVVM architecture.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:10506297541d45beaf70d97ca007d866&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Through the development of the Model part of the example app in MVVM architecture, we learned how to design the Model to decouple from ViewModel and the external system. Protocols were used to remove the direct dependencies on the implementations. ReactiveCocoa was used to handle events between the decoupled components. Also we found Himotoki was helpful to map JSON data to our entities. In the next blog post, we will design and implement View and ViewModel parts.&lt;/p&gt;

&lt;p&gt;If you have questions, suggestions or problems, feel free to leave comments.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:10506297541d45beaf70d97ca007d866:1&#34;&gt;If you are familiar with &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt;, &lt;a href=&#34;https://github.com/thoughtbot/Argo&#34;&gt;Argo&lt;/a&gt; is also a good choice for a JSON parser.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10506297541d45beaf70d97ca007d866:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10506297541d45beaf70d97ca007d866:2&#34;&gt;In &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;DDD (Domain-Driven Design)&lt;/a&gt;, an entity is a concept of a domain model and is defined by its identity. In our project, the term is used to mean just a concept or object regardless of its identity.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10506297541d45beaf70d97ca007d866:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10506297541d45beaf70d97ca007d866:3&#34;&gt;Refer to &lt;a href=&#34;http://programmers.stackexchange.com/questions/151733/if-immutable-objects-are-good-why-do-people-keep-creating-mutable-objects&#34;&gt;this page&lt;/a&gt; to know more about immutability and mutability.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10506297541d45beaf70d97ca007d866:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10506297541d45beaf70d97ca007d866:4&#34;&gt;&amp;ldquo;&lt;a href=&#34;https://realm.io/news/testing-swift-error-type/&#34;&gt;How to Implement the ErrorType Protocol&lt;/a&gt;&amp;rdquo; is worth reading about &lt;code&gt;ErrorType&lt;/code&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10506297541d45beaf70d97ca007d866:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10506297541d45beaf70d97ca007d866:5&#34;&gt;&lt;code&gt;try?&lt;/code&gt; is used just to simplify this blog post. &lt;code&gt;do-try-catch&lt;/code&gt; should be used to handle an error to get informative.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10506297541d45beaf70d97ca007d866:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dependency Injection Framework for Swift - Simple Weather App Example with Swinject Part 1</title>
      <link>https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-1/</link>
      <pubDate>Thu, 13 Aug 2015 09:16:58 +0900</pubDate>
      
      <guid>https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-1/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Updated on Nov 20, 2015&lt;/strong&gt; to migrate to Alamofire v3.x and Swinject v0.5.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated on Oct 1, 2015&lt;/strong&gt; for the release versions of Swift 2 and Xcode 7.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href=&#34;https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-introduction-to-swinject/&#34;&gt;the last blog post&lt;/a&gt;, we walked through the concept of dependency injection and basic usage of &lt;a href=&#34;https://github.com/Swinject/Swinject&#34;&gt;Swinject&lt;/a&gt;, the dependency injection framework for Swift. In this blog post, we are going to develop the simple weather app that you saw its screenshot in the last blog post. During the simple but essential steps of the development, you will see how to get rid of tightly coupled dependencies by using the dependency injection pattern and Swinject.&lt;/p&gt;

&lt;p&gt;The source code used in this blog post is available at &lt;a href=&#34;https://github.com/Swinject/SwinjectSimpleExample&#34;&gt;a repository on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://yoichitgy.github.io/images/post/2015-08/SwinjectSimpleExampleScreenshot.png&#34; alt=&#34;SwinjectSimpleExample Screenshot&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;requirements:929d1b9e13edd8ae673f74cad40c219d&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Xcode 7&lt;/li&gt;
&lt;li&gt;OpenWeatherMap API key&lt;/li&gt;
&lt;li&gt;CocoaPods 0.38 or later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use &lt;a href=&#34;http://openweathermap.org&#34;&gt;OpenWeatherMap&lt;/a&gt; for a free API to get weather information. &lt;a href=&#34;http://home.openweathermap.org/users/sign_up&#34;&gt;Sign up&lt;/a&gt; and get a free API key.&lt;/p&gt;

&lt;p&gt;To install Swinject and some frameworks, we will use &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;preparation-of-the-project:929d1b9e13edd8ae673f74cad40c219d&#34;&gt;Preparation of the Project&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start with a new Xcode project. Select &lt;code&gt;File &amp;gt; New &amp;gt; Project...&lt;/code&gt; menu and &lt;code&gt;iOS &amp;gt; Application &amp;gt; Single View Application&lt;/code&gt; item. Set  its product name to &lt;code&gt;SwinjectSimpleExample&lt;/code&gt;, language to Swift and devices to iPhone. Check &lt;code&gt;Include Unit Tests&lt;/code&gt; only&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:929d1b9e13edd8ae673f74cad40c219d:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:929d1b9e13edd8ae673f74cad40c219d:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, then save it anywhere in your local storage.&lt;/p&gt;

&lt;p&gt;Then, we are going to install &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;, &lt;a href=&#34;https://github.com/SwiftyJSON/SwiftyJSON&#34;&gt;SwiftyJSON&lt;/a&gt;, &lt;a href=&#34;https://github.com/Swinject/Swinject&#34;&gt;Swinject&lt;/a&gt;, &lt;a href=&#34;https://github.com/Quick/Quick&#34;&gt;Quick&lt;/a&gt; and &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; with &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. Create &lt;code&gt;Podfile&lt;/code&gt; with the following text content in the project root directory. Then run &lt;code&gt;pod install&lt;/code&gt; command to install them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;
platform :ios, &#39;8.0&#39;
use_frameworks!

pod &#39;Alamofire&#39;, &#39;~&amp;gt; 3.1.0&#39;
pod &#39;SwiftyJSON&#39;, &#39;~&amp;gt; 2.3.0&#39;
pod &#39;Swinject&#39;, &#39;0.5&#39;

target &#39;SwinjectSimpleExampleTests&#39; do
    pod &#39;Quick&#39;, &#39;0.8.0&#39;
    pod &#39;Nimble&#39;, &#39;3.0.0&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alamofire is a networking library to write request and asynchronous response simply. SwiftyJSON is a library to access JSON elements simply. Quick is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Behavior-driven_development&#34;&gt;behavior-driven development&lt;/a&gt; framework to write tests as specs in simple structures. Nimble is a matcher framework that is expressive and supports asynchronous tests. For details, please visit their project pages.&lt;/p&gt;

&lt;p&gt;To use the free weather API on iOS 9, we have to allow HTTP connections. Open &lt;code&gt;Info.plist&lt;/code&gt; and add &lt;code&gt;NSAppTransportSecurity&lt;/code&gt; dictionary with &lt;code&gt;NSAllowsArbitraryLoads&lt;/code&gt; element set to &lt;code&gt;true&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:929d1b9e13edd8ae673f74cad40c219d:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:929d1b9e13edd8ae673f74cad40c219d:3&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.  &lt;a href=&#34;http://stackoverflow.com/questions/30720813/cfnetwork-sslhandshake-failed-ios-9&#34;&gt;Here&lt;/a&gt; is more information about the setting and its background.&lt;/p&gt;

&lt;h2 id=&#34;without-dependency-injection:929d1b9e13edd8ae673f74cad40c219d&#34;&gt;Without Dependency Injection&lt;/h2&gt;

&lt;p&gt;First, without dependency injection, we are going to implement a model to handle weather information retrieved through the network service. We will see what can be a problem if we do not care about coupled dependencies.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;City.swift&lt;/code&gt; to &lt;code&gt;SwinjectSimpleExample&lt;/code&gt; group in the project. We define &lt;code&gt;City&lt;/code&gt; to be an entity representing a city with weather information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;City.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct City {
    let id: Int
    let name: String
    let weather: String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add &lt;code&gt;OpenWeatherMap.swift&lt;/code&gt; to store configurations of OpenWeatherMap API. Here please fill &lt;code&gt;apiKey&lt;/code&gt; with your own API key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenWeatherMap.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct OpenWeatherMap {
    private static let apiKey = &amp;quot;YOUR API KEY HERE&amp;quot;

    private static let cityIds = [
        6077243, 524901, 5368361, 1835848, 3128760, 4180439,
        2147714, 264371, 1816670, 2643743, 3451190, 1850147
    ]

    static let url = &amp;quot;http://api.openweathermap.org/data/2.5/group&amp;quot;

    static var parameters: [String: String] {
        return [
            &amp;quot;APPID&amp;quot;: apiKey,
            &amp;quot;id&amp;quot;: cityIds.map { String($0) }.joinWithSeparator(&amp;quot;,&amp;quot;)
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add &lt;code&gt;WeatherFetcher.swift&lt;/code&gt; to implement &lt;code&gt;WeatherFetcher&lt;/code&gt;, which has &lt;code&gt;fetch&lt;/code&gt; function taking a callback to handle an optional array of &lt;code&gt;Cities&lt;/code&gt; returned from OpenWeatherMap.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WeatherFetcher.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
import Alamofire
import SwiftyJSON

struct WeatherFetcher {
    static func fetch(response: [City]? -&amp;gt; ()) {
        Alamofire.request(.GET, OpenWeatherMap.url, parameters: OpenWeatherMap.parameters)
            .response { _, _, data, _ in
                let cities = data.map { decode($0) }
                response(cities)
            }
    }

    private static func decode(data: NSData) -&amp;gt; [City] {
        let json = JSON(data: data)
        var cities = [City]()
        for (_, j) in json[&amp;quot;list&amp;quot;] {
            if let id = j[&amp;quot;id&amp;quot;].int {
                let city = City(
                    id: id,
                    name: j[&amp;quot;name&amp;quot;].string ?? &amp;quot;&amp;quot;,
                    weather: j[&amp;quot;weather&amp;quot;][0][&amp;quot;main&amp;quot;].string ?? &amp;quot;&amp;quot;)
                cities.append(city)
            }
        }
        return cities
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;fetch&lt;/code&gt; function uses Alamofire to send a request to the server and to get a response as JSON data asynchronously. The specifications of API call and response JSON format are described in &lt;a href=&#34;http://openweathermap.org/current#severalid&#34;&gt;&amp;ldquo;Call for several city IDs&amp;rdquo; section of OpenWeatherMap site&lt;/a&gt;.
The &lt;code&gt;data&lt;/code&gt; parameter in the closure passed to &lt;code&gt;response&lt;/code&gt; from &lt;code&gt;Alamofire&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; if the response has an error. We do not care about details of the error and just pass &lt;code&gt;nil&lt;/code&gt; to the callback to &lt;code&gt;fetch&lt;/code&gt; in this example although the error should be handled in a product app.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;decode&lt;/code&gt; function parses the JSON data returned from the server. It is called as &lt;code&gt;data.map { decode($0) }&lt;/code&gt; in &lt;code&gt;fetch&lt;/code&gt; where &lt;code&gt;map&lt;/code&gt; executes the trailing closure if &lt;code&gt;data&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;, otherwise returns nil. The &lt;code&gt;decode&lt;/code&gt; function uses SwiftyJSON to map the JSON data to an array of our &lt;code&gt;City&lt;/code&gt; entities.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a unit test to &lt;code&gt;SwinjectSimpleExampleTests&lt;/code&gt; group in our project. The filename is &lt;code&gt;WeatherFetcherSpec.swift&lt;/code&gt; and its target is set to &lt;code&gt;SwinjectSimpleExampleTests&lt;/code&gt; when we create the file. The test is going to check whether the weather data can be retrieved and parsed correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WeatherFetcherSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
@testable import SwinjectSimpleExample

class WeatherFetcherSpec: QuickSpec {
    override func spec() {
        it(&amp;quot;returns cities.&amp;quot;) {
            var cities: [City]?
            WeatherFetcher.fetch { cities = $0 }

            expect(cities).toEventuallyNot(beNil())
            expect(cities?.count).toEventually(equal(12))
            expect(cities?[0].id).toEventually(equal(6077243))
            expect(cities?[0].name).toEventually(equal(&amp;quot;Montreal&amp;quot;))
            expect(cities?[0].weather).toEventually(equal(&amp;quot;Clouds&amp;quot;))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Quick and Nimble, each test is written in an &lt;code&gt;it&lt;/code&gt; closure, and each expectation is expressed as &lt;code&gt;expect(something).to(condition)&lt;/code&gt; or &lt;code&gt;expect(something).toNot(condition)&lt;/code&gt; synchronously, or &lt;code&gt;expect(something).toEventually(condition)&lt;/code&gt; or &lt;code&gt;expect(something).toEventuallyNot(condition)&lt;/code&gt; asynchronously. &lt;code&gt;WeatherFetcher.fetch&lt;/code&gt; sets &lt;code&gt;cities&lt;/code&gt; asynchronously when weather data is retrieved, so we use the latter ones here.&lt;/p&gt;

&lt;p&gt;First, we check &lt;code&gt;cities&lt;/code&gt;, which is initialized with &lt;code&gt;nil&lt;/code&gt;, should be set to an array after &lt;code&gt;fetch&lt;/code&gt; invokes the callback asynchronously. Second, the number of &lt;code&gt;cities&lt;/code&gt; should be &lt;code&gt;12&lt;/code&gt; because our request to the API has 12 city IDs. From the third to fifth, we check only the first city for simplicity. The &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;weather&lt;/code&gt; should be &lt;code&gt;6077243&lt;/code&gt;, &lt;code&gt;&amp;quot;Montreal&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;Clouds&amp;quot;&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Okay. We are ready to run the unit test. Type &lt;code&gt;Command-U&lt;/code&gt; to run. Did you see the test passed? I think some people saw it passed, but the others not. Why? Because the weather in &amp;ldquo;Montreal&amp;rdquo; in the real world right now must be &amp;ldquo;Clouds&amp;rdquo; to pass the test. How can we write a test passing regardless of the current weather? It is actually difficult to write if the part parsing JSON data depends on the part retrieving the data from the server.&lt;/p&gt;

&lt;h2 id=&#34;with-dependency-injection:929d1b9e13edd8ae673f74cad40c219d&#34;&gt;With Dependency Injection&lt;/h2&gt;

&lt;p&gt;In the last section, we found the tightly coupled dependency of the parser on the network, namely Alamofire, made the test difficult. In this section, we are going to decouple them, inject the dependency and write a better test.&lt;/p&gt;

&lt;p&gt;First, add &lt;code&gt;Networking.swift&lt;/code&gt; with the following protocol definition. It has &lt;code&gt;request&lt;/code&gt; method taking a callback to pass response data from the network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Networking.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation

protocol Networking {
    func request(response: NSData? -&amp;gt; ())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add &lt;code&gt;Network.swift&lt;/code&gt; to implement &lt;code&gt;Network&lt;/code&gt; that conforms &lt;code&gt;Networking&lt;/code&gt; protocol. It encapsulates Alamofire.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
import Alamofire

struct Network : Networking {
    func request(response: NSData? -&amp;gt; ()) {
        Alamofire.request(.GET, OpenWeatherMap.url, parameters: OpenWeatherMap.parameters)
            .response { _, _, data, _ in
                response(data)
            }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify &lt;code&gt;WeatherFetcher&lt;/code&gt; to get &lt;code&gt;Networking&lt;/code&gt; injected when it is instantiated and to use it to request weather data to the server. Note that &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt; functions were &lt;code&gt;static&lt;/code&gt; in the last section, but here they are instance methods to use the &lt;code&gt;networking&lt;/code&gt; property. A default initializer taking &lt;code&gt;networking&lt;/code&gt; is implicitly created by Swift. Now &lt;code&gt;WeatherFetcher&lt;/code&gt; has no dependency on Alamofire.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WeatherFetcher.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct WeatherFetcher {
    let networking: Networking

    func fetch(response: [City]? -&amp;gt; ()) {
        networking.request { data in
            let cities = data.map { self.decode($0) }
            response(cities)
        }
    }

    private func decode(data: NSData) -&amp;gt; [City] {
        let json = JSON(data: data)
        var cities = [City]()
        for (_, j) in json[&amp;quot;list&amp;quot;] {
            if let id = j[&amp;quot;id&amp;quot;].int {
                let city = City(
                    id: id,
                    name: j[&amp;quot;name&amp;quot;].string ?? &amp;quot;&amp;quot;,
                    weather: j[&amp;quot;weather&amp;quot;][0][&amp;quot;main&amp;quot;].string ?? &amp;quot;&amp;quot;)
                cities.append(city)
            }
        }
        return cities
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then modify &lt;code&gt;WeatherFetcherSpec&lt;/code&gt; to test the decoupled network and JSON parser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WeatherFetcherSpec.swift&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Quick
import Nimble
import Swinject
@testable import SwinjectSimpleExample

class WeatherFetcherSpec: QuickSpec {
    struct StubNetwork: Networking {
        private static let json =
        &amp;quot;{&amp;quot; +
            &amp;quot;\&amp;quot;list\&amp;quot;: [&amp;quot; +
                &amp;quot;{&amp;quot; +
                    &amp;quot;\&amp;quot;id\&amp;quot;: 2643743,&amp;quot; +
                    &amp;quot;\&amp;quot;name\&amp;quot;: \&amp;quot;London\&amp;quot;,&amp;quot; +
                    &amp;quot;\&amp;quot;weather\&amp;quot;: [&amp;quot; +
                        &amp;quot;{&amp;quot; +
                            &amp;quot;\&amp;quot;main\&amp;quot;: \&amp;quot;Rain\&amp;quot;&amp;quot; +
                        &amp;quot;}&amp;quot; +
                    &amp;quot;]&amp;quot; +
                &amp;quot;},&amp;quot; +
                &amp;quot;{&amp;quot; +
                    &amp;quot;\&amp;quot;id\&amp;quot;: 3451190,&amp;quot; +
                    &amp;quot;\&amp;quot;name\&amp;quot;: \&amp;quot;Rio de Janeiro\&amp;quot;,&amp;quot; +
                    &amp;quot;\&amp;quot;weather\&amp;quot;: [&amp;quot; +
                        &amp;quot;{&amp;quot; +
                            &amp;quot;\&amp;quot;main\&amp;quot;: \&amp;quot;Clear\&amp;quot;&amp;quot; +
                        &amp;quot;}&amp;quot; +
                    &amp;quot;]&amp;quot; +
                &amp;quot;}&amp;quot; +
            &amp;quot;]&amp;quot; +
        &amp;quot;}&amp;quot;

        func request(response: NSData? -&amp;gt; ()) {
            let data = StubNetwork.json.dataUsingEncoding(
                NSUTF8StringEncoding, allowLossyConversion: false)
            response(data)
        }
    }

    override func spec() {
        var container: Container!
        beforeEach {
            container = Container()

            // Registrations for the network using Alamofire.
            container.register(Networking.self) { _ in Network() }
            container.register(WeatherFetcher.self) { r in
                WeatherFetcher(networking: r.resolve(Networking.self)!)
            }

            // Registration for the stub network.
            container.register(Networking.self, name: &amp;quot;stub&amp;quot;) { _ in
                StubNetwork()
            }
            container.register(WeatherFetcher.self, name: &amp;quot;stub&amp;quot;) { r in
                WeatherFetcher(
                    networking: r.resolve(Networking.self, name: &amp;quot;stub&amp;quot;)!)
            }
        }

        it(&amp;quot;returns cities.&amp;quot;) {
            var cities: [City]?
            let fetcher = container.resolve(WeatherFetcher.self)!
            fetcher.fetch { cities = $0 }

            expect(cities).toEventuallyNot(beNil())
            expect(cities?.count).toEventually(beGreaterThan(0))
        }
        it(&amp;quot;fills weather data.&amp;quot;) {
            var cities: [City]?
            let fetcher = container.resolve(WeatherFetcher.self, name: &amp;quot;stub&amp;quot;)!
            fetcher.fetch { cities = $0 }

            expect(cities?[0].id).toEventually(equal(2643743))
            expect(cities?[0].name).toEventually(equal(&amp;quot;London&amp;quot;))
            expect(cities?[0].weather).toEventually(equal(&amp;quot;Rain&amp;quot;))
            expect(cities?[1].id).toEventually(equal(3451190))
            expect(cities?[1].name).toEventually(equal(&amp;quot;Rio de Janeiro&amp;quot;))
            expect(cities?[1].weather).toEventually(equal(&amp;quot;Clear&amp;quot;))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;StubNetwork&lt;/code&gt; is a stub that conforms &lt;code&gt;Networking&lt;/code&gt;. It has a definition of JSON data that has the same structure as the data returned from the server. Its &lt;code&gt;request&lt;/code&gt; method returns the identical data any time regardless of the current weather in the real world. In &lt;code&gt;spec&lt;/code&gt;, &lt;code&gt;container&lt;/code&gt; is configured at the beginning, and it is used later in the two &lt;code&gt;it&lt;/code&gt; specifications. Without a registration name, &lt;code&gt;container&lt;/code&gt; is configured to use &lt;code&gt;Network&lt;/code&gt;. With the registration name &amp;ldquo;stub&amp;rdquo;, it is configured to use &lt;code&gt;StubNetwork&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first &lt;code&gt;it&lt;/code&gt; tests that the real network through Alamofire returns some JSON data&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:929d1b9e13edd8ae673f74cad40c219d:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:929d1b9e13edd8ae673f74cad40c219d:4&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; by getting an instance of &lt;code&gt;WeatherFetcher&lt;/code&gt; from &lt;code&gt;container&lt;/code&gt; without a registration name. We do not test detail of &lt;code&gt;cities&lt;/code&gt;. We just confirm that &lt;code&gt;fetch&lt;/code&gt; can get some data from the server.&lt;/p&gt;

&lt;p&gt;The second &lt;code&gt;it&lt;/code&gt; tests that the JSON data are parsed correctly by getting an instance of &lt;code&gt;WeatherFetcher&lt;/code&gt; with the registration name &amp;ldquo;stub&amp;rdquo;. Because the stub returns two cities as defined in &lt;code&gt;StubNetwork&lt;/code&gt;, we write expectations for the two cities and check whether each expectation asynchronously gets the value specified in the stub definition.&lt;/p&gt;

&lt;p&gt;Okay. We are ready to run the tests. Type &lt;code&gt;Command-U&lt;/code&gt; to run. This time you got the tests passed regardless of the current weather, didn&amp;rsquo;t you? This is the advantage of the dependency injection pattern to decouple a component from another, in this example decoupling of the parser component from network component.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:929d1b9e13edd8ae673f74cad40c219d&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The problem of dependencies to write unit tests has been explained and fixed with dependency injection in the scenario to develop the app using the network service and JSON parser. By decoupling these two parts, the unit tests have become reproducible under any circumstances. In &lt;a href=&#34;https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-2/&#34;&gt;the next blog post&lt;/a&gt;, we will develop the UI part of the example app to learn how to use Swinject in a product app.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:929d1b9e13edd8ae673f74cad40c219d:1&#34;&gt;UI tests are excluded because they are out of scope of this blog post.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:929d1b9e13edd8ae673f74cad40c219d:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:929d1b9e13edd8ae673f74cad40c219d:3&#34;&gt;Actually this setting is not preferable if you develop an app to release. In this blog post, I used the setting just because the free API only supports HTTP.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:929d1b9e13edd8ae673f74cad40c219d:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:929d1b9e13edd8ae673f74cad40c219d:4&#34;&gt;This test may fail if the network is disconnected or has a problem, but these cases can be practically ignored in our unit tests.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:929d1b9e13edd8ae673f74cad40c219d:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>